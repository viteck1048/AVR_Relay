#include "configboard.h"


byte null_tek_r()
{
	obscht_r += tek_r;
	tek_r = 0;
#ifdef NEW_MEM
	save_time();
#endif
	return 0;
}


byte admset(char key, byte navihacija_menu)
{
	static short int i;
	if(batjarelay::set_st == 0) {
		dsplbuf.dsplbuf_clear();
		dsplbuf.prnt(6, 0, "Set adminpass.:", 0, 0);
		dsplbuf.prnt(7, 8, "%04x", adminpass, 1);
		batjarelay::set_st = 10;
		cory.setDiap(7, 7, 8, 11);
	}
	else if(batjarelay::set_st == 10) {
		
		char* setstr = dsplbuf.getlaststr() + 8;
		byte cor = cory.getPoz();
		
		if(key == VK_UP) {
			if(*(setstr + cor) == 57) {
				*(setstr + cor) = 48;
			}
			else {
				(*(setstr + cor))++;
			}
		}
		else if(key == VK_DOWN) {
			if(*(setstr + cor) == 48) {
				*(setstr + cor) = 57;
			}
			else {
				(*(setstr + cor))--;
			}
		}
		
		
		if(key == VK_RETURN) {
			adminpass = (*(setstr + 0) - 48);
			adminpass <<= 4;
			adminpass += (*(setstr + 1) - 48);
			adminpass <<= 4;
			adminpass += (*(setstr + 2) - 48);
			adminpass <<= 4;
			adminpass += (*(setstr + 3) - 48);
#ifndef NEW_MEM
			writeData(PASS, (long int)adminpass);
#endif
			
			dsplbuf.dsplbuf_clear();
			dsplbuf.prnt(6, 0, "Set kontrastnost", 0, 0);
			dsplbuf.prnt(7, 0, "1", 0, 0);
			dsplbuf.prnt(7, 2, NULL, 9, 0);
			dsplbuf.prnt(7, 3, "16", 0, 0);
			dsplbuf.prnt(7, 9, "%02d", get_jaskravist(), 1);
			cory.setDiap(7, 7, 11, 11);
			batjarelay::set_st = 1;//		LCD_COORD(1, 10);			lcd.printf("%x", cory.get());
		}
	}
	else if(batjarelay::set_st == 1) {
		switch(key) {
			case VK_UP:{
				set_jaskravist_up();
				dsplbuf.prnt(7, 9, "%02d", get_jaskravist(), 1);
				break;
			}
			case VK_DOWN:{
				set_jaskravist_down();
				dsplbuf.prnt(7, 9, "%02d", get_jaskravist(), 1);
				break;
			}
			case VK_RETURN:{
				dsplbuf.dsplbuf_clear();
				dsplbuf.prnt(6, 0, "Set mash.time   ", 0, 0);
				
				cory.setDiap(7, 7, 15, 15);
				batjarelay::set_st = 2;
				break;
			}
			default:{
				break;
			}
		}
	}
	else if(batjarelay::set_st == 2) {
		switch(key) {
			case VK_UP:{
				if(rezhym_tmr >= 0 && rezhym_tmr < 8) {
					rezhym_tmr++;
				}
				else {
					rezhym_tmr = 0;
				}
				break;
			}
			case VK_DOWN:{
				if(rezhym_tmr > 0 && rezhym_tmr <= 8) {
					rezhym_tmr--;
				}
				else {
					rezhym_tmr = 8;
				}
				break;
			}
			case VK_RETURN:{
				break;
			}
			default:{
				break;
			}
		}
		if(rezhym_tmr > 0 && rezhym_tmr < 8) {
			dsplbuf.prnt(7, 0, "period.puls", 0, 0);
			switch(rezhym_tmr) {
				case 1: {
					dsplbuf.prnt(7, 11, "0.4s", 0, 0);
					break;
				}
				case 2: {
					dsplbuf.prnt(7, 11, "0.6s", 0, 0);	//0.6
					break;
				}
				case 3: {
					dsplbuf.prnt(7, 11, "1.0s", 0, 0);	//1
					break;
				}
				case 4: {
					dsplbuf.prnt(7, 11, "2.0s", 0, 0);	//2
					break;
				}
				case 5: {
					dsplbuf.prnt(7, 11, "3.0s", 0, 0);	//3
					break;
				}
				case 6: {
					dsplbuf.prnt(7, 11, "4.0s", 0, 0);	//4
					break;
				}
				case 7: {
					dsplbuf.prnt(7, 11, "5.0s", 0, 0);	//5
					break;
				}
				default: {
					break;
				}
			}
		}
		else {
			if(rezhym_tmr == 8) {
				dsplbuf.prnt(7, 0, "nepr. signal 1 ", 0, 0);
			}
			else {
				dsplbuf.prnt(7, 0, "nepr. signal 0 ", 0, 0);
			}
		}
		if(key == VK_RETURN) {
			dsplbuf.offblnk();
			dsplbuf.prnt(6, 0, "Restartiraj     ", 0, 0);
			dsplbuf.prnt(7, 0, "      controller", 0, 0);
			batjarelay::set_st = 3;
		}
	}
	else if(batjarelay::set_st == 3) {
		if(key == VK_RETURN) {
			batjarelay::set_st = 4;
			dsplbuf.dsplbuf_clear();
		}
	}
	else if(batjarelay::set_st == 4) {
		dsplbuf.prnt(6, 0, "activ time", 0, 0);
		prnt_1x7(99, 7, 4);
		if(key == VK_RETURN) {
			batjarelay::set_st = 5;
			dsplbuf.dsplbuf_clear();
		}
	}
	else if(batjarelay::set_st == 5) {
		dsplbuf.prnt(6, 0, "relay ON", 0, 0);
		prnt_1x7(95, 6, 9);
		prnt_1x7(96, 7, 0);
		prnt_1x7(97, 7, 9);
		if(key == VK_RETURN) {
			batjarelay::set_st = 6;
			dsplbuf.dsplbuf_clear();
			dsplbuf.prnt(6, 0, "test keyboard", 0, 0);
		}
	}
	else if(batjarelay::set_st == 6) {
		prnt_1x7(98, 7, 9);
		switch(key) {
			case VK_UP:{
				dsplbuf.prnt(7, 0, "VK_UP   ", 0, 0);
				break;
			}
			case VK_DOWN:{
				dsplbuf.prnt(7, 0, "VK_DOWN ", 0, 0);
				break;
			}
			case VK_LEFT:{
				dsplbuf.prnt(7, 0, "VK_LEFT ", 0, 0);
				break;
			}
			case VK_RIGHT:{
				dsplbuf.prnt(7, 0, "VK_RIGHT", 0, 0);
				break;
			}
			case VK_RETURN:{
				batjarelay::set_st = 7;
				dsplbuf.dsplbuf_clear();
				dsplbuf.prnt(6, 0, "test relay", 0, 0);
				break;
			}
			default:{
				break;
			}
		}
	}
	else if(batjarelay::set_st == 7) {
		prnt_1x7(0b1110, 7, 9);
		cory.set(7, 0);
		switch(key) {
			case VK_UP:{
				digitalWrite(OUT_2, !digitalRead(OUT_2));
				break;
			}
			case VK_DOWN:{
#ifdef BACKLIGHT_CONTROL
				digitalWrite(BLC_PIN, !digitalRead(BLC_PIN));
#else
				digitalWrite(OUT_1, 0);
				digitalWrite(OUT_2, 0);
				digitalWrite(OUT_3, 0);
#endif
				break;
			}
			case VK_LEFT:{
				digitalWrite(OUT_1, !digitalRead(OUT_1));
				break;
			}
			case VK_RIGHT:{
				digitalWrite(OUT_3, !digitalRead(OUT_3));
				break;
			}
			case VK_RETURN:{
				batjarelay::set_st = 7;
				dsplbuf.dsplbuf_clear();
				i = 0;
				
				if(false) {
					dsplbuf.offblnk();
					dsplbuf.prnt(6, 0, "Restartiraj     ", 0, 0);
					dsplbuf.prnt(7, 0, "      controller", 0, 0);
					batjarelay::set_st = 0;
#ifndef NEW_MEM
					save();
					return 0;
#else
					return 3;
#endif
				}
				else {
					batjarelay::set_st = 8;
					dsplbuf.prnt(6, 0, "Time redact     ", 0, 0);
					dsplbuf.prnt(7, 0, "%08X-HexEdit", obscht_r, true);
					cory.setDiap(7, 7, 0, 8);
					dsplbuf.onblnk();
					//dsplbuf.prnt(6, 0, "EEPR.view       ", 0, 0);
				}
				
				break;
			}
			default:{
				break;
			}
		}
	}
	else if(batjarelay::set_st == 8) {
		char* setstr = dsplbuf.getlaststr();
		byte cor = cory.getPoz();
		
		if(key == VK_UP) {
			if(*(setstr + cor) == 57)
				*(setstr + cor) = 65;
			else if(*(setstr + cor) == 70)
				*(setstr + cor) = 48;
			else
				(*(setstr + cor))++;
		}
		else if(key == VK_DOWN) {
			if(*(setstr + cor) == 48)
				*(setstr + cor) = 57;
			else if(*(setstr + cor) == 65)
				*(setstr + cor) = 57;
			else
				(*(setstr + cor))--;
		}
		
		if(key == VK_RETURN) {
			obscht_r = 0;
			for(cor = 0; cor < 8; cor++) {
				obscht_r <<= 4;
				obscht_r += ((*(setstr + cor) >= 65) ? (*(setstr + cor) - 55) : (*(setstr + cor) - 48));
			}
			batjarelay::set_st == 9;
		}
	}
	else if(batjarelay::set_st == 9) {
		batjarelay::set_st = 8;
		dsplbuf.prnt(6, 0, "UP-save,Ent.-esc", 0, 0);
		dsplbuf.prnt(7, 0, "%08X-HexView", obscht_r, true);
		cory.setDiap(7, 7, 0, 8);
		
		if(key == VK_UP) {
#ifdef NEW_MEM
			save_time();
#endif
			batjarelay::set_st = 0;
		}
		
		if(key == VK_RETURN) {
			batjarelay::set_st = 0;
		}
	}
	/* else if(batjarelay::set_st == 7) {
		dsplbuf.prnt(7, 0, "i = % 3d", i, 1);
		dsplbuf.prnt(7, 7, " %d", readEEPROM(1 + i * ), 1);
		dsplbuf.prnt(7, 0, "i = % 3d", i, 1);
		dsplbuf.prnt(7, 0, "i = % 3d", i, 1);
		
		switch(key) {
			case VK_UP:{
				break;
			}
			case VK_DOWN:{
				break;
			}
			case VK_LEFT:{
				break;
			}
			case VK_RIGHT:{
				break;
			}
			case VK_RETURN:{
				batjarelay::set_st = 8;
				dsplbuf.dsplbuf_clear();
				i = 0;
				dsplbuf.prnt(6, 0, "EEPROMedit all", 0, 0);
				break;
			}
			default:{
				break;
			}
		}
	}
	else if(batjarelay::set_st == 8) {
		
		switch(key) {
			case VK_UP:{
				break;
			}
			case VK_DOWN:{
				break;
			}
			case VK_LEFT:{
				break;
			}
			case VK_RIGHT:{
				break;
			}
			case VK_RETURN:{
				dsplbuf.offblnk();
				dsplbuf.prnt(6, 0, "Restartiraj     ", 0, 0);
				dsplbuf.prnt(7, 0, "      controller", 0, 0);
				batjarelay::set_st = 3;
				break;
			}
			default:{
				break;
			}
		}
	} */
	return navihacija_menu;
}


#ifdef WIFI8266
byte wifiset(char key, byte navihacija_menu)
{
	char* setstrviev = dsplbuf.getlaststr();
	static byte local_coord_x;
	static byte poz_setstr;
	char* setstr = dsplbuf.getlaststr() - 100;
	if(batjarelay::set_st <= 4 && batjarelay::set_st != 0) {
		if(key == VK_LEFT) {
			if(local_coord_x != 0)
				local_coord_x--;
			if(cory.getPoz() == 15) {
				cory++;
				if(poz_setstr != 0)
					poz_setstr--;
			}
			key = 0;
		}
		if(key == VK_RIGHT) {
			if(local_coord_x != 31)
				local_coord_x++;
			if(cory.getPoz() == 0) {
				cory--;
				if(poz_setstr != 16)
					poz_setstr++;
			}
			key = 0;
		}
		dsplbuf.prnt(7, 0, "%.16s", setstr + poz_setstr, 1);
	}
	else if(key == VK_LEFT || key == VK_RIGHT) {
		key = 0;
		return navihacija_menu;
	}
	if(batjarelay::set_st == 0) {
		local_coord_x = 0;
		poz_setstr = 0;
		dsplbuf.dsplbuf_clear();
		dsplbuf.prnt(6, 0, "Set WiFi SSID:", 0, 0);
		readStringEEPROM(ADR_SSID, 32, (char*)setstr);
		if(setstr[0] < 32 || setstr[0] > 127) {
			setstr[0] = 't';
			setstr[1] = 'e';
			setstr[2] = 's';
			setstr[3] = 't';
			setstr[4] = ' ';
			setstr[5] = 0;
		}
		setstr[33] = 0;
		for(byte ii = 0; ii < 32; ii++) {
			if(setstr[33]) {
				setstr[ii] = 32;
				continue;
			}
			if((setstr[ii] < 32 || setstr[ii] > 127) && !setstr[33])
				setstr[ii] = 32;
			if(setstr[ii] == 32 && (setstr[ii + 1] == 32 || (setstr[ii + 1] < 32 || setstr[ii + 1] > 127)))
				setstr[33] = 1;
		}
		setstr[32] = 0;
		dsplbuf.prnt(7, 0, "%.16s", setstr, 1);
		cory.setDiap(7, 7, 0, 15);
		cory.set(7, 0);
		batjarelay::set_st = 1;
		return navihacija_menu;
	}
	else if(batjarelay::set_st == 1) {
		if(key == VK_DOWN || key == VK_UP) {
			if(key == VK_UP) {
				*(setstr + local_coord_x) = (*(setstr + local_coord_x) == 'z' ? 32 : *(setstr + local_coord_x) + 1);
			}
			else if(key == VK_DOWN) {
				*(setstr + local_coord_x) = (*(setstr + local_coord_x) == 32 ? 'z' : *(setstr + local_coord_x) - 1);
			}
			dsplbuf.prnt(7, 0, "%.16s", setstr + poz_setstr, 1);
			return navihacija_menu;
		}
		if(key == VK_RETURN) {
			cory.set(7, 0);
			for(byte ii = 0; ii < 32; ii++) {
				if(setstr[ii] == 32 && (setstr[ii + 1] == 32 || setstr[ii + 1] == 0)) {
					setstr[ii] = 0;
					break;
				}
			}
			writeStringEEPROM(ADR_SSID, 32, setstr);
			dsplbuf.dsplbuf_clear();
			setstr[32] = 0;
			dsplbuf.prnt(6, 0, "Set WiFi pass.:", 0, 0);
			readStringEEPROM(ADR_PASS, 32, (char*)setstr);
			if(setstr[0] < 32 || setstr[0] > 127) {
				setstr[0] = 't';
				setstr[1] = 'e';
				setstr[2] = 's';
				setstr[3] = 't';
				setstr[4] = ' ';
				setstr[5] = 0;
			}
			setstr[33] = 0;
			for(byte ii = 0; ii < 32; ii++) {
				if(setstr[33]) {
					setstr[ii] = 32;
					continue;
				}
				if((setstr[ii] < 32 || setstr[ii] > 127) && !setstr[33])
					setstr[ii] = 32;
				if(setstr[ii] == 32 && (setstr[ii + 1] == 32 || (setstr[ii + 1] < 32 || setstr[ii + 1] > 127)))
					setstr[33] = 1;
			}
			dsplbuf.prnt(7, 0, "%.16s", setstr, 1);
			batjarelay::set_st = 2;
			local_coord_x = 0;
			poz_setstr = 0;
			cory.setDiap(7, 7, 0, 15);
			cory.set(7, 0);
			return navihacija_menu;
		}
	}
	else if(batjarelay::set_st == 2) {
		if(key == VK_DOWN || key == VK_UP) {
			if(key == VK_UP) {
				*(setstr + local_coord_x) = (*(setstr + local_coord_x) == 'z' ? 32 : *(setstr + local_coord_x) + 1);
			}
			else if(key == VK_DOWN) {
				*(setstr + local_coord_x) = (*(setstr + local_coord_x) == 32 ? 'z' : *(setstr + local_coord_x) - 1);
			}
			dsplbuf.prnt(7, 0, "%.16s", setstr + poz_setstr, 1);
			return navihacija_menu;
		}
		if(key == VK_RETURN) {
			cory.set(7, 0);
			for(byte ii = 0; ii < 32; ii++) {
				if(setstr[ii] == 32 && (setstr[ii + 1] == 32 || setstr[ii + 1] == 0)) {
					setstr[ii] = 0;
					break;
				}
			}
			writeStringEEPROM(ADR_PASS, 32, setstr);
			dsplbuf.dsplbuf_clear();
			setstr[32] = 0;
			dsplbuf.prnt(6, 0, "Set host URL:", 0, 0);
			readStringEEPROM(ADR_HOST, 32, (char*)setstr);
			if(setstr[0] < 32 || setstr[0] > 127) {
				setstr[0] = 't';
				setstr[1] = 'e';
				setstr[2] = 's';
				setstr[3] = 't';
				setstr[4] = ' ';
				setstr[5] = 0;
			}
			setstr[33] = 0;
			for(byte ii = 0; ii < 32; ii++) {
				if(setstr[33]) {
					setstr[ii] = 32;
					continue;
				}
				if((setstr[ii] < 32 || setstr[ii] > 127) && !setstr[33])
					setstr[ii] = 32;
				if(setstr[ii] == 32 && (setstr[ii + 1] == 32 || (setstr[ii + 1] < 32 || setstr[ii + 1] > 127)))
					setstr[33] = 1;
			}
			dsplbuf.prnt(7, 0, "%.16s", setstr, 1);
			batjarelay::set_st = 3;
			local_coord_x = 0;
			poz_setstr = 0;
			cory.setDiap(7, 7, 0, 15);
			cory.set(7, 0);
			return navihacija_menu;
		}
	}
	else if(batjarelay::set_st == 3) {
		if(key == VK_DOWN || key == VK_UP) {
			if(key == VK_UP) {
				*(setstr + local_coord_x) = (*(setstr + local_coord_x) == 'z' ? 32 : *(setstr + local_coord_x) + 1);
			}
			else if(key == VK_DOWN) {
				*(setstr + local_coord_x) = (*(setstr + local_coord_x) == 32 ? 'z' : *(setstr + local_coord_x) - 1);
			}
			dsplbuf.prnt(7, 0, "%.16s", setstr + poz_setstr, 1);
			return navihacija_menu;
		}
		if(key == VK_RETURN) {
			for(byte ii = 0; ii < 32; ii++) {
				if(setstr[ii] == 32 && (setstr[ii + 1] == 32 || setstr[ii + 1] == 0)) {
					setstr[ii] = 0;
					break;
				}
			}
			writeStringEEPROM(ADR_HOST, 32, setstr);
			dsplbuf.dsplbuf_clear();
			setstr[32] = 0;
			dsplbuf.prnt(6, 0, "Set host PORT:", 0, 0);
			*((long*)(&(setstr[16]))) = (long)readEEPROM(ADR_PORT, _LONG);
			dsplbuf.prnt(7, 2, "%.5d", *((long*)(&(setstr[16]))), 1);
			batjarelay::set_st = 5;
			local_coord_x = 0;
			poz_setstr = 0;
			cory.setDiap(7, 7, 2, 6);
			cory.set(7, 6);
			return navihacija_menu;
		}
	}
	else if(batjarelay::set_st == 4) {
		if(key == VK_DOWN || key == VK_UP) {
			if(key == VK_UP) {
				*(setstr + local_coord_x) = (*(setstr + local_coord_x) == 'z' ? 32 : *(setstr + local_coord_x) + 1);
			}
			else if(key == VK_DOWN) {
				*(setstr + local_coord_x) = (*(setstr + local_coord_x) == 32 ? 'z' : *(setstr + local_coord_x) - 1);
			}
			dsplbuf.prnt(7, 0, "%.16s", setstr + poz_setstr, 1);
			return navihacija_menu;
		}
		if(key == VK_RETURN) {
			for(byte ii = 0; ii < 32; ii++) {
				if(setstr[ii] == 32 && (setstr[ii + 1] == 32 || setstr[ii + 1] == 0)) {
					setstr[ii] = 0;
					break;
				}
			}
			writeStringEEPROM(ADR_NAME, 32, setstr);
			batjarelay::set_st = 0;
			updWiFi = 1;
			return 0xff;
		}
	}
	else if(batjarelay::set_st == 5) {
		byte cor = cory.getPoz();
		if(key == VK_UP) {
			if(*(setstrviev + cor + 2) == 57) {
				*(setstrviev + cor + 2) = 48;
			}
			else {
				*(setstrviev + cor + 2) += 1;
			}
			return navihacija_menu;
		}
		if(key == VK_DOWN) {
			if(*(setstrviev + cor + 2) == 48) {
				*(setstrviev + cor + 2) = 57;
			}
			else {
				*(setstrviev + cor + 2) -= 1;
			}
			return navihacija_menu;
		}
		if(key == VK_RETURN) {
			*((long*)(&(setstr[16]))) = (long)(setstrviev[2] - 48) * 10000;
			*((long*)(&(setstr[16]))) += (long)(setstrviev[3] - 48) * 1000;
			*((long*)(&(setstr[16]))) += (long)(setstrviev[4] - 48) * 100;
			*((long*)(&(setstr[16]))) += (long)(setstrviev[5] - 48) * 10;
			*((long*)(&(setstr[16]))) += (long)(setstrviev[6] - 48);
			writeEEPROM(ADR_PORT, _LONG, (long int)*((long*)(&(setstr[16]))));
			
			dsplbuf.dsplbuf_clear();
			setstr[32] = 0;
			dsplbuf.prnt(6, 0, "Set LAN: DHCP", 0, 0);
			setstr[0] = (byte)readEEPROM(ADR_DHCP, _BYTE);
			dsplbuf.prnt(7, 2, "%.14s", setstr[0] == 0 ? "DHCP OFF" : "DHCP  ON", 1);
			if(setstr[0] != 0 && setstr[0] != 1)
				setstr[0] = 1;
			batjarelay::set_st = 6;
			local_coord_x = 0;
			poz_setstr = 0;
			cory.setDiap(7, 7, 0, 0);
			cory.set(7, 0);
			return navihacija_menu;
		}
	}
	else if(batjarelay::set_st == 6) {
		if(key == VK_DOWN || key == VK_UP) {
			setstr[0] = setstr[0] == 0 ? 1 : 0;
			dsplbuf.prnt(7, 2, "%.14s", setstr[0] == 0 ? "DHCP OFF" : "DHCP  ON", 1);
			return navihacija_menu;
		}
		if(key == VK_RETURN) {
			writeEEPROM(ADR_DHCP, _BYTE, (long int)(setstr[0]));
			if(!setstr[0]) {
				dsplbuf.dsplbuf_clear();
				batjarelay::set_st = 7;
				dsplbuf.prnt(6, 0, "Set LAN: IP:", 0, 0);
				readStringEEPROM(ADR_IP, 4, (char*)setstr);
				dsplbuf.prnt(7, 1, "%.3d.", (byte)setstr[0], 1);
				dsplbuf.prnt(7, 5, "%.3d.", (byte)setstr[1], 1);
				dsplbuf.prnt(7, 9, "%.3d.", (byte)setstr[2], 1);
				dsplbuf.prnt(7, 13, "%.3d", (byte)setstr[3], 1);
				cory.setDiap(7, 7, 1, 15);
				cory.set(7, 1);
				return navihacija_menu;
			}
			else {
				dsplbuf.dsplbuf_clear();
				setstr[32] = 0;
				dsplbuf.prnt(6, 0, "Set mash. name:", 0, 0);
				readStringEEPROM(ADR_NAME, 32, (char*)setstr);
				if(setstr[0] < 32 || setstr[0] > 127) {
					setstr[0] = 't';
					setstr[1] = 'e';
					setstr[2] = 's';
					setstr[3] = 't';
					setstr[4] = ' ';
					setstr[5] = 0;
				}
				setstr[33] = 0;
				for(byte ii = 0; ii < 32; ii++) {
					if(setstr[33]) {
						setstr[ii] = 32;
						continue;
					}
					if((setstr[ii] < 32 || setstr[ii] > 127) && !setstr[33])
						setstr[ii] = 32;
					if(setstr[ii] == 32 && (setstr[ii + 1] == 32 || (setstr[ii + 1] < 32 || setstr[ii + 1] > 127)))
						setstr[33] = 1;
				}
				dsplbuf.prnt(7, 0, "%.16s", setstr, 1);
				batjarelay::set_st = 4;
				local_coord_x = 0;
				poz_setstr = 0;
				cory.setDiap(7, 7, 0, 15);
				cory.set(7, 0);
				return navihacija_menu;
			}
		}
	}
	else if(batjarelay::set_st == 7) {
		byte cor = cory.getPoz();
		if(*(setstrviev + cor + 1) != '.') {
			if(key == VK_UP) {
				if(*(setstrviev + cor + 1) == 57) {
					*(setstrviev + cor + 1) = 48;
				}
				else {
					*(setstrviev + cor + 1) += 1;
				}
				return navihacija_menu;
			}
			if(key == VK_DOWN) {
				if(*(setstrviev + cor + 1) == 48) {
					*(setstrviev + cor + 1) = 57;
				}
				else {
					*(setstrviev + cor + 1) -= 1;
				}
				return navihacija_menu;
			}
		}
		if(key == VK_RETURN) {
			setstr[0] = (byte)(setstrviev[1] - 48) * 100;
			setstr[0] += (byte)(setstrviev[2] - 48) * 10;
			setstr[0] += (byte)(setstrviev[3] - 48);
			
			setstr[1] = (byte)(setstrviev[5] - 48) * 100;
			setstr[1] += (byte)(setstrviev[6] - 48) * 10;
			setstr[1] += (byte)(setstrviev[7] - 48);
			
			setstr[2] = (byte)(setstrviev[9] - 48) * 100;
			setstr[2] += (byte)(setstrviev[10] - 48) * 10;
			setstr[2] += (byte)(setstrviev[11] - 48);
			
			setstr[3] = (byte)(setstrviev[13] - 48) * 100;
			setstr[3] += (byte)(setstrviev[14] - 48) * 10;
			setstr[3] += (byte)(setstrviev[15] - 48);
			
			writeStringEEPROM(ADR_IP, 4, setstr);
			
			dsplbuf.dsplbuf_clear();
			batjarelay::set_st = 8;
			dsplbuf.prnt(6, 0, "Set LAN: SUBNET:", 0, 0);
			readStringEEPROM(ADR_SUBNET, 4, (char*)setstr);
			dsplbuf.prnt(7, 1, "%.3d.", (byte)setstr[0], 1);
			dsplbuf.prnt(7, 5, "%.3d.", (byte)setstr[1], 1);
			dsplbuf.prnt(7, 9, "%.3d.", (byte)setstr[2], 1);
			dsplbuf.prnt(7, 13, "%.3d", (byte)setstr[3], 1);
			cory.setDiap(7, 7, 1, 15);
			cory.set(7, 1);
			return navihacija_menu;
		}
	}
	else if(batjarelay::set_st == 8) {
		byte cor = cory.getPoz();
		if(*(setstrviev + cor + 1) != '.') {
			if(key == VK_UP) {
				if(*(setstrviev + cor + 1) == 57) {
					*(setstrviev + cor + 1) = 48;
				}
				else {
					*(setstrviev + cor + 1) += 1;
				}
				return navihacija_menu;
			}
			if(key == VK_DOWN) {
				if(*(setstrviev + cor + 1) == 48) {
					*(setstrviev + cor + 1) = 57;
				}
				else {
					*(setstrviev + cor + 1) -= 1;
				}
				return navihacija_menu;
			}
		}
		if(key == VK_RETURN) {
			setstr[0] = (byte)(setstrviev[1] - 48) * 100;
			setstr[0] += (byte)(setstrviev[2] - 48) * 10;
			setstr[0] += (byte)(setstrviev[3] - 48);
			
			setstr[1] = (byte)(setstrviev[5] - 48) * 100;
			setstr[1] += (byte)(setstrviev[6] - 48) * 10;
			setstr[1] += (byte)(setstrviev[7] - 48);
			
			setstr[2] = (byte)(setstrviev[9] - 48) * 100;
			setstr[2] += (byte)(setstrviev[10] - 48) * 10;
			setstr[2] += (byte)(setstrviev[11] - 48);
			
			setstr[3] = (byte)(setstrviev[13] - 48) * 100;
			setstr[3] += (byte)(setstrviev[14] - 48) * 10;
			setstr[3] += (byte)(setstrviev[15] - 48);
			
			writeStringEEPROM(ADR_SUBNET, 4, setstr);
			
			dsplbuf.dsplbuf_clear();
			batjarelay::set_st = 9;
			dsplbuf.prnt(6, 0, "Set LAN: GATE:", 0, 0);
			readStringEEPROM(ADR_GATE, 4, (char*)setstr);
			dsplbuf.prnt(7, 1, "%.3d.", (byte)setstr[0], 1);
			dsplbuf.prnt(7, 5, "%.3d.", (byte)setstr[1], 1);
			dsplbuf.prnt(7, 9, "%.3d.", (byte)setstr[2], 1);
			dsplbuf.prnt(7, 13, "%.3d", (byte)setstr[3], 1);
			cory.setDiap(7, 7, 1, 15);
			cory.set(7, 1);
			return navihacija_menu;
		}
	}
	else if(batjarelay::set_st == 9) {
		byte cor = cory.getPoz();
		if(*(setstrviev + cor + 1) != '.') {
			if(key == VK_UP) {
				if(*(setstrviev + cor + 1) == 57) {
					*(setstrviev + cor + 1) = 48;
				}
				else {
					*(setstrviev + cor + 1) += 1;
				}
				return navihacija_menu;
			}
			if(key == VK_DOWN) {
				if(*(setstrviev + cor + 1) == 48) {
					*(setstrviev + cor + 1) = 57;
				}
				else {
					*(setstrviev + cor + 1) -= 1;
				}
				return navihacija_menu;
			}
		}
		if(key == VK_RETURN) {
			setstr[0] = (byte)(setstrviev[1] - 48) * 100;
			setstr[0] += (byte)(setstrviev[2] - 48) * 10;
			setstr[0] += (byte)(setstrviev[3] - 48);
			
			setstr[1] = (byte)(setstrviev[5] - 48) * 100;
			setstr[1] += (byte)(setstrviev[6] - 48) * 10;
			setstr[1] += (byte)(setstrviev[7] - 48);
			
			setstr[2] = (byte)(setstrviev[9] - 48) * 100;
			setstr[2] += (byte)(setstrviev[10] - 48) * 10;
			setstr[2] += (byte)(setstrviev[11] - 48);
			
			setstr[3] = (byte)(setstrviev[13] - 48) * 100;
			setstr[3] += (byte)(setstrviev[14] - 48) * 10;
			setstr[3] += (byte)(setstrviev[15] - 48);
			
			writeStringEEPROM(ADR_GATE, 4, setstr);
			
			dsplbuf.dsplbuf_clear();
			batjarelay::set_st = 10;
			dsplbuf.prnt(6, 0, "Set LAN: DNS 1:", 0, 0);
			readStringEEPROM(ADR_DNS1, 4, (char*)setstr);
			dsplbuf.prnt(7, 1, "%.3d.", (byte)setstr[0], 1);
			dsplbuf.prnt(7, 5, "%.3d.", (byte)setstr[1], 1);
			dsplbuf.prnt(7, 9, "%.3d.", (byte)setstr[2], 1);
			dsplbuf.prnt(7, 13, "%.3d", (byte)setstr[3], 1);
			cory.setDiap(7, 7, 1, 15);
			cory.set(7, 1);
			return navihacija_menu;
		}
	}
	else if(batjarelay::set_st == 10) {
		byte cor = cory.getPoz();
		if(*(setstrviev + cor + 1) != '.') {
			if(key == VK_UP) {
				if(*(setstrviev + cor + 1) == 57) {
					*(setstrviev + cor + 1) = 48;
				}
				else {
					*(setstrviev + cor + 1) += 1;
				}
				return navihacija_menu;
			}
			if(key == VK_DOWN) {
				if(*(setstrviev + cor + 1) == 48) {
					*(setstrviev + cor + 1) = 57;
				}
				else {
					*(setstrviev + cor + 1) -= 1;
				}
				return navihacija_menu;
			}
		}
		if(key == VK_RETURN) {
			setstr[0] = (byte)(setstrviev[1] - 48) * 100;
			setstr[0] += (byte)(setstrviev[2] - 48) * 10;
			setstr[0] += (byte)(setstrviev[3] - 48);
			
			setstr[1] = (byte)(setstrviev[5] - 48) * 100;
			setstr[1] += (byte)(setstrviev[6] - 48) * 10;
			setstr[1] += (byte)(setstrviev[7] - 48);
			
			setstr[2] = (byte)(setstrviev[9] - 48) * 100;
			setstr[2] += (byte)(setstrviev[10] - 48) * 10;
			setstr[2] += (byte)(setstrviev[11] - 48);
			
			setstr[3] = (byte)(setstrviev[13] - 48) * 100;
			setstr[3] += (byte)(setstrviev[14] - 48) * 10;
			setstr[3] += (byte)(setstrviev[15] - 48);
			
			writeStringEEPROM(ADR_DNS1, 4, setstr);
			
			dsplbuf.dsplbuf_clear();
			batjarelay::set_st = 11;
			dsplbuf.prnt(6, 0, "Set LAN: DNS 2:", 0, 0);
			readStringEEPROM(ADR_DNS2, 4, (char*)setstr);
			dsplbuf.prnt(7, 1, "%.3d.", (byte)setstr[0], 1);
			dsplbuf.prnt(7, 5, "%.3d.", (byte)setstr[1], 1);
			dsplbuf.prnt(7, 9, "%.3d.", (byte)setstr[2], 1);
			dsplbuf.prnt(7, 13, "%.3d", (byte)setstr[3], 1);
			cory.setDiap(7, 7, 1, 15);
			cory.set(7, 1);
			return navihacija_menu;
		}
	}
	else if(batjarelay::set_st == 11) {
		byte cor = cory.getPoz();
		if(*(setstrviev + cor + 1) != '.') {
			if(key == VK_UP) {
				if(*(setstrviev + cor + 1) == 57) {
					*(setstrviev + cor + 1) = 48;
				}
				else {
					*(setstrviev + cor + 1) += 1;
				}
				return navihacija_menu;
			}
			if(key == VK_DOWN) {
				if(*(setstrviev + cor + 1) == 48) {
					*(setstrviev + cor + 1) = 57;
				}
				else {
					*(setstrviev + cor + 1) -= 1;
				}
				return navihacija_menu;
			}
		}
		if(key == VK_RETURN) {
			setstr[0] = (byte)(setstrviev[1] - 48) * 100;
			setstr[0] += (byte)(setstrviev[2] - 48) * 10;
			setstr[0] += (byte)(setstrviev[3] - 48);
			
			setstr[1] = (byte)(setstrviev[5] - 48) * 100;
			setstr[1] += (byte)(setstrviev[6] - 48) * 10;
			setstr[1] += (byte)(setstrviev[7] - 48);
			
			setstr[2] = (byte)(setstrviev[9] - 48) * 100;
			setstr[2] += (byte)(setstrviev[10] - 48) * 10;
			setstr[2] += (byte)(setstrviev[11] - 48);
			
			setstr[3] = (byte)(setstrviev[13] - 48) * 100;
			setstr[3] += (byte)(setstrviev[14] - 48) * 10;
			setstr[3] += (byte)(setstrviev[15] - 48);
			
			writeStringEEPROM(ADR_DNS2, 4, setstr);
			
			dsplbuf.dsplbuf_clear();
			setstr[32] = 0;
			dsplbuf.prnt(6, 0, "Set mash. name:", 0, 0);
			readStringEEPROM(ADR_NAME, 32, (char*)setstr);
			if(setstr[0] < 32 || setstr[0] > 127) {
				setstr[0] = 't';
				setstr[1] = 'e';
				setstr[2] = 's';
				setstr[3] = 't';
				setstr[4] = ' ';
				setstr[5] = 0;
			}
			setstr[33] = 0;
			for(byte ii = 0; ii < 32; ii++) {
				if(setstr[33]) {
					setstr[ii] = 32;
					continue;
				}
				if((setstr[ii] < 32 || setstr[ii] > 127) && !setstr[33])
					setstr[ii] = 32;
				if(setstr[ii] == 32 && (setstr[ii + 1] == 32 || (setstr[ii + 1] < 32 || setstr[ii + 1] > 127)))
					setstr[33] = 1;
			}
			dsplbuf.prnt(7, 0, "%.16s", setstr, 1);
			batjarelay::set_st = 4;
			local_coord_x = 0;
			poz_setstr = 0;
			cory.setDiap(7, 7, 0, 15);
			cory.set(7, 0);
			return navihacija_menu;
		}
	}
	return navihacija_menu;
}
#endif
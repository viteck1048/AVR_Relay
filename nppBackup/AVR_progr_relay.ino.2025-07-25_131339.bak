#define MAIN_INO

#include "configboard.h"

long unsigned int test_time, sprac_r_1, sprac_r_2, sprac_r_3;

unsigned long int obscht_r, tek_r;
char jaskravist, rezhym_tmr;
unsigned char fl_del;

char f5;
byte tmr_;

dspl_buff dsplbuf;

coord cory;

#ifdef HARD_RESET_WIFI
	byte wifi_reset_tmr;
#endif

short int napruga_z_klavy;

byte arr_golovne_menu[16];

volatile bool rab;

#ifdef TICKERS
	void time_itr_loop();
	Ticker time_itr_ticker(time_itr_loop, 40);
#endif

byte bi;
byte time_slot;

#ifdef WIFI8266
long sn_mega;
byte wifi_enable_fl;
//byte resv_fl;
byte resv_buf[18];
byte send_buf[33];
byte si;
//byte resv_tmr;
byte updt_setup;
byte updt_admset;
byte updWiFi;
byte autoresetwifi;
#endif

byte navihacija_menu; //vk_return - peremykach ; 0 - робота/ 1 - налаштування/ 2 - admin setup
volatile byte start;
unsigned char tmr_sek;

unsigned short int adminpass;

void save_() {
	if(rab == 0 || start != 0)
		return;
#ifndef TICKERS
	cli();
#else
	time_itr_ticker.pause();
#endif
	rab = 0;
	OCR1A = 15625 - 1;
#ifdef BACKLIGHT_CONTROL
	digitalWrite(BLC_PIN, 0);
#endif
#ifdef SIGN_GOT
	digitalWrite(GOT_OUT, 0);
#endif
#ifdef NEW_MEM
	save_itr();
#else
	#ifndef NO_AUTOSAVE
		save();
	#endif
#endif
#ifndef TICKERS
	sei();
#else
	time_itr_ticker.resume();
#endif
#ifdef BACKLIGHT_CONTROL
	digitalWrite(BLC_PIN, 1);
#endif
}

lichylnyk_imp ri[3];
rele_chasu rv[3];
rele_zalezhnosti rz[3];

short in, in_mem, virt_out;


LiquidCrystal lcd(DISPLEY_RS, DISPLEY_E, DISPLEY_D4, DISPLEY_D5, DISPLEY_D6, DISPLEY_D7);

void setup()
{
#ifndef TICKERS
	cli();
#else
	time_itr_ticker.stop();
#endif
	rab = 0;
	time_slot = 0;
	lcd.begin(16, 2);
	inic_user_ch();
#ifdef WIFI8266
	updt_setup = 0;
	updt_admset = 0;
	wifi_enable_fl = 0;
	Serial.begin(9600);
	updWiFi = 0;
	autoresetwifi = 240;
#endif
	pinMode(OUT_1, OUTPUT);
	pinMode(OUT_2, OUTPUT);
	pinMode(OUT_3, OUTPUT);
#ifdef TIME_CONTROL
	pinMode(CONTROL_OUT_1, OUTPUT);
	pinMode(CONTROL_OUT_2, OUTPUT);
	pinMode(CONTROL_OUT_3, OUTPUT);
	pinMode(CONTROL_OUT_4, OUTPUT);
	pinMode(CONTROL_OUT_5, OUTPUT);
#endif
#ifdef BACKLIGHT_CONTROL
	pinMode(BLC_PIN, OUTPUT);
	digitalWrite(BLC_PIN, 0);
#endif
#ifdef SIGN_GOT
	pinMode(GOT_OUT, OUTPUT);
	digitalWrite(GOT_OUT, 0);
#endif
	pinMode(DISPLEY_Y, OUTPUT);
	
	digitalWrite(OUT_1, D_O_OFF);
	digitalWrite(OUT_2, D_O_OFF);
	digitalWrite(OUT_3, D_O_OFF);
	
#ifdef HARD_RESET_WIFI
	pinMode(HARD_RESET_WIFI_PIN, OUTPUT);
	digitalWrite(HARD_RESET_WIFI_PIN, 0);
	delay(1000);
	digitalWrite(HARD_RESET_WIFI_PIN, 1);
	wifi_reset_tmr = 0;
#endif
	
	obscht_r = tek_r = 0;
#ifndef TICKERS
	delay(1000);
#endif
	load();
#ifndef TICKERS
	delay(100);
#endif
#ifdef BACKLIGHT_CONTROL
	digitalWrite(BLC_PIN, 1);
#endif
	
#ifndef TICKERS
	TCCR1A = 0;
	TCCR1B = 0;
	
	OCR1A = 625 - 1; 
	TCCR1B |= (1 << WGM12); // CTC режим
	TCCR1B |= (1 << CS12);
	TCCR1B |= (1 << CS10);
	TIMSK1 |= (1 << OCIE1A); // Timer1 cmp
#else
//	time_itr_ticker.attach_ms(40, time_itr_loop);
#endif
	
	in = 0;
	in_mem = in;
	navihacija_menu = 0;
	
	switch(rezhym_tmr) {
		case 1: {
			fl_del = 10;	//0.4
			break;
		}
		case 2: {
			fl_del = 15;	//0.6
			break;
		}
		case 3: {
			fl_del = 25;	//1
			break;
		}
		case 4: {
			fl_del = 50;	//2
			break;
		}
		case 5: {
			fl_del = 75;	//3
			break;
		}
		case 6: {
			fl_del = 100;	//4
			break;
		}
		case 7: {
			fl_del = 125;	//5
			break;
		}
		default: {
			fl_del = 5;	//'0' - постійно
			break;
		}
	}
	
#ifdef TIME_CONTROL
	digitalWrite(CONTROL_OUT_1, 0);
	digitalWrite(CONTROL_OUT_2, 0);
	digitalWrite(CONTROL_OUT_3, 0);
	digitalWrite(CONTROL_OUT_4, 0);
	digitalWrite(CONTROL_OUT_5, 0);
#endif
	
#ifndef NO_AUTOSAVE
	attachInterrupt(0, save_, RISING);			
#endif
	
#ifdef SIGN_GOT
	if(PWR_DTCT == true)
		digitalWrite(GOT_OUT, 1);
#endif
	
	rab = 1;
	start = 25;
	analogWrite(DISPLEY_Y, jaskravist * 17);
#ifndef TICKERS
	sei();
#else
	time_itr_ticker.start();
	sei();
#endif
	clearSerialBuffer();
//	writeEEPROM(sprac_r_3, _LONG, (long int)0);
	return;
}

void clearSerialBuffer() {
	while (Serial.available() > 0) {
		char junk = Serial.read();
	}
}

void loop(){
#ifdef TICKERS
	time_itr_ticker.update();
#endif
	return;
}


#ifdef WIFI8266
void loop_2() {
	
#ifdef TIME_CONTROL
	digitalWrite(CONTROL_OUT_2, 1);
#endif
	
	if(time_slot == 0) {
		if(reedSerial() && !wifi_enable_fl)
			wifi_enable_fl |= 0b00000001;
	}
	else {
		writeSerial();
	}	
	
#ifdef TIME_CONTROL
	digitalWrite(CONTROL_OUT_2, 0);
#endif
	return;
}
#endif


#ifndef TICKERS
ISR(TIMER1_COMPA_vect)
#else
void time_itr_loop()
#endif
{
#ifdef TIME_CONTROL
	digitalWrite(CONTROL_OUT_1, 1);
	digitalWrite(CONTROL_OUT_3, 1);
#endif
	if(start > 1) {
		start--;
		return;
	}
	if(rab == 0) {
		if(PWR_DTCT == true) {
			setup();
		}
		return;
	}
	
	static bool ffi = 0;
	static unsigned char tmr_prnt;
	static byte poz;
	
	if(start == 1) {
		tmr_ = 0;
		tmr_sek = (unsigned char)25;
		tmr_prnt = (unsigned char)5;
		start = 0;
	}
	if(PWR_DTCT) {
		if(fl_del != 5) {
			if(TMR_DTCT != ffi) {
				tmr_ = fl_del;
				ffi = TMR_DTCT;
			}
		}
		else {
			if((TMR_DTCT == true) ^ (rezhym_tmr == 0)) {
				tmr_ = fl_del;
			}
		}
	}
	if(tmr_ > 0)
		tmr_--;
	if(tmr_sek > 0)
		tmr_sek--;
	if(tmr_prnt > 0)
		tmr_prnt--;

#ifdef WIFI8266
	if((wifi_enable_fl & 0b11111110) != 0)
		wifi_enable_fl--;
#endif	
	
	if(!navihacija_menu) {
		poz = cory.getPoz();
	}	
	
	if(tmr_sek == 0) {
		test_time++;
		
		if(tmr_ > 0) {
			tek_r++;
		}
#ifdef WIFI8266
		if(wifi_enable_fl == 1)
			if(autoresetwifi != 0)
				autoresetwifi--;
		else
			autoresetwifi = 240;
		if(autoresetwifi == 0) {
			updWiFi = 1;
			autoresetwifi = 240;
		}
	#ifdef HARD_RESET_WIFI
		if(updWiFi == 0) {
			digitalWrite(HARD_RESET_WIFI_PIN, 1);
			wifi_reset_tmr = 0;
		}
		else {
			if(wifi_reset_tmr < 10) {
				digitalWrite(HARD_RESET_WIFI_PIN, 0);
				wifi_reset_tmr++;
			}
			else {
				updWiFi = 0;
			}
		}
	#endif
#endif
		tmr_sek = (unsigned char)25;
	}
	
#ifdef NO_AUTOSAVE
	if(tmr_ == 1) {
		save();
	}
#endif
#ifdef NEW_MEM
	if(tmr_ == 1) {
		save_time();
	}
#endif
	static unsigned char tmr_set = 0;
	char key;
	if(navihacija_menu == 0 && getkeyreturn()) {
		if(tmr_set != 250)
			tmr_set++;
		if(navihacija_menu == 0 && tmr_set > 130) {
			LCD_COORD(0, 0);
			lcd.printf(F("admin setup     "));
			LCD_COORD(1, 0);
			lcd.printf("            %3d ", 250 - tmr_set);
		}
		else if(navihacija_menu == 0 && tmr_set > 70) {
			dsplbuf.prnt(cory.get() / 16, cory.get() % 16 == 7 ? 0 : 9, " Setup ", 0, 0);
			dsplbuf.prnt_screen();
		}
		else if(navihacija_menu == 0 && tmr_set > 55) {
			dsplbuf.prnt(cory.get() / 16, cory.get() % 16 == 7 ? 0 : 9, "  %3d  ", 70 - tmr_set, 1);
			dsplbuf.prnt_screen();
		}
		else if(navihacija_menu == 0 && tmr_set > 8) {
			dsplbuf.prnt(cory.get() / 16, cory.get() % 16 == 7 ? 0 : 9, " RESET ", 0, 0);
			dsplbuf.prnt_screen();
		}
	/* 	else if(navihacija_menu == 0 && tmr_set > 1) {
			dsplbuf.prnt(cory.get() / 16, cory.get() % 16 == 7 ? 0 : 9, "  %3d  ", 20 - tmr_set, 1);
			dsplbuf.prnt_screen();
		} */
#ifdef TIME_CONTROL
		digitalWrite(CONTROL_OUT_2, 1);
		digitalWrite(CONTROL_OUT_2, 0);
		digitalWrite(CONTROL_OUT_3, 0);
#endif
		return;
	}else {
		if(navihacija_menu == 0 && tmr_set != 0) {
			if(tmr_set >= 250) {
				navihacija_menu = 2;
				tmr_set = 0;
				key = 0;
				dsplbuf.dsplbuf_clear();
				dsplbuf.prnt(6, 0, "admin setting", 0, 0);
				dsplbuf.prnt(7, 0, "pass.   0000", 0, 0);
			}
			else if(tmr_set >= 70) {
				navihacija_menu = 1;
				tmr_set = 0;
				key = 0;
			}
			else if(tmr_set >= 10) {
				key = VK_RETURN;
				tmr_set = 0;
			}
			else {
				tmr_set = 0;
				key = 0;
			}
		}
		else { 
			key = getkey();
		}
	}
	
	if(true) {
		if(key == VK_DOWN)
			++cory;
		else if(key == VK_UP)
			--cory;
		else if(key == VK_LEFT)
			cory--;
		else if(key == VK_RIGHT)
			cory++;
		else if(key == VK_RETURN) {
			if((arr_golovne_menu[poz] & 0b1100) == 0b0000) {
				rv[arr_golovne_menu[poz] & 0b0011].dija_vk_return();
			}
			if((arr_golovne_menu[poz] & 0b1100) == 0b0100) {
				ri[arr_golovne_menu[poz] & 0b0011].dija_vk_return();
			}
			if((arr_golovne_menu[poz] & 0b1100) == 0b1000 && (arr_golovne_menu[poz] & 0b1111) != 0b1011) {
				rz[arr_golovne_menu[poz] & 0b0011].dija_vk_return();
			}
#ifdef WIFI8266
			if((arr_golovne_menu[poz] & 0b1111) == 0b1011)
				updWiFi = 1;
#endif
			if((arr_golovne_menu[poz] & 0b1111) == 0b1101) {
				null_tek_r();
#ifdef NO_AUTOSAVE
				save();
#endif
			}
		}
	}
	
	in = virt_out & 0x1fff;
	in += ((short)IN_1) << 15;
	in += ((short)IN_2) << 14;
	in += ((short)IN_3) << 13;
	in_mem ^= in;
	
	if(navihacija_menu < 3) {
		for(byte iii = 0; iii < 3; iii++) {
			rv[iii]--;
			ri[iii]--;
			rz[iii]--;
		}
	}
#ifndef ELEKTROKHARCHUVANNJA
	if((navihacija_menu & 0b0011) != 3) {
		digitalWrite(OUT_1, (virt_out & 0x1000) != 0 ? D_O_ON : D_O_OFF);
		digitalWrite(OUT_2, (virt_out & 0x0800) != 0 ? D_O_ON : D_O_OFF);
		digitalWrite(OUT_3, (virt_out & 0x0400) != 0 ? D_O_ON : D_O_OFF);
	}
#else
	if((navihacija_menu & 0b0011) != 3) {
		digitalWrite(OUT_1, D_O_OFF);
		digitalWrite(OUT_2, D_O_OFF);
		digitalWrite(OUT_3, D_O_OFF);
	}
	#ifdef BACKLIGHT_CONTROL
		digitalWrite(BLC_PIN, 0);
	#endif
#endif
/* 	sprac_r_1 += (in_mem & 0x1000) != 0 ? 1 : 0; 
	sprac_r_2 += (in_mem & 0x0800) != 0 ? 1 : 0; 
	sprac_r_3 += (in_mem & 0x0400) != 0 ? 1 : 0; 
 */	
	if(navihacija_menu == 1) {
		if((arr_golovne_menu[poz] & 0b1100) == 0b0000) {
			navihacija_menu = rv[arr_golovne_menu[poz] & 0b0011].setup(key);
		}
		if((arr_golovne_menu[poz] & 0b1100) == 0b0100) {
			navihacija_menu = ri[arr_golovne_menu[poz] & 0b0011].setup(key);
		}
		if((arr_golovne_menu[poz] & 0b1100) == 0b1000 && (arr_golovne_menu[poz] & 0b1111) != 0b1011) {
			navihacija_menu = rz[arr_golovne_menu[poz] & 0b0011].setup(key);
		}
#ifdef WIFI8266
		if((arr_golovne_menu[poz] & 0b1111) == 0b1011) {
			navihacija_menu = wifiset(key, navihacija_menu);
			if(navihacija_menu == 0xff)
				navihacija_menu = 0;
		}
#endif
		if((arr_golovne_menu[poz] & 0b1111) == 0b1101) {
			navihacija_menu = null_tek_r();
		}
#ifdef NO_AUTOSAVE
		if(navihacija_menu == 0) {
			save();
		}
#endif
	}
	if(navihacija_menu >= 2) {
		if(navihacija_menu == 2) {
			char* setstr = dsplbuf.getlaststr() + 8;
			
			cory.setDiap(7, 7, 8, 11);
			byte cor = cory.getPoz();
			
			if(key == VK_UP) {
				if(*(setstr + cor) == 57) {
					*(setstr + cor) = 48;
				}
				else {
					(*(setstr + cor))++;
				}
			}
			else if(key == VK_DOWN) {
				if(*(setstr + cor) == 48) {
					*(setstr + cor) = 57;
				}
				else {
					(*(setstr + cor))--;
				}
			}
			
			if(key == VK_RETURN) {
				
				unsigned short int sss;
				sss = (*(setstr + 0) - 48);
				sss <<= 4;
				sss += (*(setstr + 1) - 48);
				sss <<= 4;
				sss += (*(setstr + 2) - 48);
				sss <<= 4;
				sss += (*(setstr + 3) - 48);
				
				if(sss == adminpass || !PWR_DTCT) {
					navihacija_menu = 3;
					cory.set(0, 8);
				}else {
					navihacija_menu = 0;
				}
				key = 0;
			}
		}
		else if((navihacija_menu & 0b0011) == 3) {
			navihacija_menu = set_admin(key);
#ifdef NO_AUTOSAVE
			if(navihacija_menu == 0) {
				save();
			}
#endif
		}
	}
	
	if(!navihacija_menu) {
		prnt_intrf();
	}
	
	if(tmr_prnt == 0) {
		tmr_prnt = (unsigned char)1;
		dsplbuf.prnt_screen();
	}
#ifdef WIFI8266
	loop_2();	
#endif
	in_mem = in;
#ifdef TIME_CONTROL
	digitalWrite(CONTROL_OUT_3, 0);
#endif

}
